{"version":3,"sources":["utils.js","contexts/QuizContext.js","components/Answer.js","components/Question.js","API.js","styled-components/MainStyles.js","components/Quiz.js","App.js","styled-components/GlobalStyles.js","index.js"],"names":["shuffleAnswers","question","incorrect_answers","correct_answer","map","answer","sort","Math","random","value","a","b","obj","htmlDecode","input","DOMParser","parseFromString","documentElement","textContent","initialState","questions","undefined","curQuestionNum","showResults","correctAnswers","answers","selectedAnswer","reducer","state","action","type","length","payload","QuizContext","createContext","QuizProvider","children","useReducer","Provider","Answer","answerText","onSelectAnswer","index","correctAnswer","correctAnswerClass","wrongAnswerClass","disabledClass","elo","className","onClick","Question","useContext","quizState","dispatch","currentQuestion","DIFFICULTY","fetchQuestions","amount","difficulty","url","fetch","res","json","data","Card","styled","div","Background","Quiz","useState","isLoading","setIsLoading","useEffect","then","results","App","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af358be2.chunk.js","sourcesContent":["export const shuffleAnswers = question => {\r\n  const allAnswers = [...question.incorrect_answers, question.correct_answer];\r\n\r\n  return allAnswers\r\n    .map(answer => ({ sort: Math.random(), value: answer }))\r\n    .sort((a, b) => a.sort - b.sort)\r\n    .map(obj => obj.value);\r\n};\r\n\r\nexport const htmlDecode = input => {\r\n  const parser = new DOMParser().parseFromString(input, 'text/html');\r\n  return parser.documentElement.textContent;\r\n};\r\n","import { createContext, useReducer } from 'react';\r\nimport { shuffleAnswers } from '../utils';\r\n\r\nconst initialState = {\r\n  questions: undefined,\r\n  curQuestionNum: 0,\r\n  showResults: false,\r\n  correctAnswers: 0,\r\n  answers: undefined,\r\n  selectedAnswer: '',\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'NEXT': {\r\n      const showResults = state.curQuestionNum === state.questions.length - 1;\r\n      const curQuestionNum = showResults\r\n        ? state.curQuestionNum\r\n        : state.curQuestionNum + 1;\r\n      const answers = showResults\r\n        ? []\r\n        : shuffleAnswers(state.questions[curQuestionNum]);\r\n      return {\r\n        ...state,\r\n        curQuestionNum,\r\n        showResults,\r\n        answers,\r\n        selectedAnswer: '',\r\n      };\r\n    }\r\n    case 'RESTART': {\r\n      return initialState;\r\n    }\r\n    case 'ANSWER_CLICK': {\r\n      const correctAnswers =\r\n        action.payload === state.questions[state.curQuestionNum].correct_answer\r\n          ? state.correctAnswers + 1\r\n          : state.correctAnswers;\r\n      return {\r\n        ...state,\r\n        selectedAnswer: action.payload,\r\n        correctAnswers,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const QuizContext = createContext();\r\n\r\nexport const QuizProvider = ({ children }) => {\r\n  const value = useReducer(reducer, initialState);\r\n  return <QuizContext.Provider value={value}>{children}</QuizContext.Provider>;\r\n};\r\n","import { htmlDecode } from '../utils';\r\n\r\nconst Answer = ({\r\n  answerText,\r\n  index,\r\n  onSelectAnswer,\r\n  correctAnswer,\r\n  selectedAnswer,\r\n}) => {\r\n  const isAnswerCorrect = selectedAnswer && answerText === correctAnswer;\r\n  const isAnswerWrong =\r\n    selectedAnswer === answerText && selectedAnswer !== correctAnswer;\r\n\r\n  const correctAnswerClass = isAnswerCorrect ? 'correct-answer' : '';\r\n  const wrongAnswerClass = isAnswerWrong ? 'wrong-answer' : '';\r\n  const disabledClass = selectedAnswer ? 'disabled-answer' : '';\r\n\r\n  let elo = htmlDecode(answerText);\r\n\r\n  return (\r\n    <div\r\n      className={`answer ${correctAnswerClass} ${wrongAnswerClass} ${disabledClass}`}\r\n      onClick={() => onSelectAnswer(answerText)}\r\n    >\r\n      <div className=\"answer-text\">{elo}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Answer;\r\n","import { useContext } from 'react';\r\nimport { QuizContext } from '../contexts/QuizContext';\r\nimport Answer from './Answer';\r\nimport { htmlDecode } from '../utils';\r\n\r\nconst Question = () => {\r\n  const [quizState, dispatch] = useContext(QuizContext);\r\n  const currentQuestion = quizState.questions[quizState.curQuestionNum];\r\n\r\n  return (\r\n    <>\r\n      <div className=\"question-text\">\r\n        {htmlDecode(currentQuestion.question)}\r\n      </div>\r\n      <div className=\"answers\">\r\n        {quizState.answers.map((answer, index) => (\r\n          <Answer\r\n            key={index}\r\n            answerText={answer}\r\n            index={index}\r\n            selectedAnswer={quizState.selectedAnswer}\r\n            correctAnswer={currentQuestion.correct_answer}\r\n            onSelectAnswer={answerText =>\r\n              dispatch({ type: 'ANSWER_CLICK', payload: answerText })\r\n            }\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n","export const DIFFICULTY = {\r\n  EASY: 'easy',\r\n  MEDIUM: 'medium',\r\n  HARD: 'hard',\r\n};\r\n\r\nexport const fetchQuestions = async (amount, difficulty) => {\r\n  const url = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n\r\n  const res = await fetch(url);\r\n\r\n  const data = await res.json();\r\n\r\n  return data;\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Card = styled.div`\r\n  padding: 2em;\r\n  border-radius: 30px;\r\n  width: 65%;\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  .container {\r\n    width: 70%;\r\n    text-align: center;\r\n  }\r\n\r\n  .score {\r\n    text-align: center;\r\n    font-size: 36px;\r\n  }\r\n\r\n  .question-text {\r\n    text-align: center;\r\n    font-size: 36px;\r\n    padding: 1.2em;\r\n  }\r\n\r\n  .answers {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-content: center;\r\n  }\r\n\r\n  .answer {\r\n    cursor: pointer;\r\n    flex: 40%;\r\n    margin: 30px;\r\n    font-size: 21px;\r\n    text-align: center;\r\n    padding: 25px;\r\n    background: linear-gradient(#404677, #474d82);\r\n    border-radius: 20px;\r\n  }\r\n\r\n  .correct-answer {\r\n    background: linear-gradient(#308154, #30c373);\r\n  }\r\n\r\n  .wrong-answer {\r\n    background: linear-gradient(#81062e, #e30049);\r\n  }\r\n\r\n  .next-btn {\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    font-size: 36px;\r\n    background: linear-gradient(#e65896, #b96ced);\r\n    padding: 12px 45px;\r\n    border-radius: 30px;\r\n  }\r\n`;\r\n\r\nexport const Background = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #21233d;\r\n  ${Card} {\r\n    background-color: #353a65;\r\n  }\r\n`;\r\n","import { useContext, useState, useEffect } from 'react';\r\nimport { QuizContext } from '../contexts/QuizContext';\r\nimport Question from './Question';\r\nimport { DIFFICULTY, fetchQuestions } from '../API';\r\nimport { shuffleAnswers } from '../utils';\r\nimport { Card } from '../styled-components/MainStyles';\r\n\r\nconst Quiz = () => {\r\n  const [quizState, dispatch] = useContext(QuizContext);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetchQuestions(10, DIFFICULTY.EASY).then(data => {\r\n      quizState.questions = data.results;\r\n      quizState.answers = shuffleAnswers(quizState.questions[0]);\r\n      setIsLoading(false);\r\n    }); //eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <Card>\r\n      {!isLoading && (\r\n        <>\r\n          {quizState.showResults && (\r\n            <div className=\"container\">\r\n              <div className=\"result\">\r\n                <div className=\"result-msg\">Well Done!</div>\r\n                <div className=\"result-details\">\r\n                  You've got {quizState.correctAnswers} /{' '}\r\n                  {quizState.questions.length} points!\r\n                </div>\r\n                <div\r\n                  className=\"next-btn\"\r\n                  onClick={() => dispatch({ type: 'RESTART' })}\r\n                >\r\n                  Try Again\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {!quizState.showResults && (\r\n            <div className=\"container\">\r\n              <div className=\"score\">Score: {quizState.correctAnswers}</div>\r\n              <Question />\r\n              <div\r\n                className=\"next-btn\"\r\n                onClick={() => dispatch({ type: 'NEXT' })}\r\n              >\r\n                Next\r\n              </div>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n      {isLoading && <div>Loading...</div>}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n","import Quiz from './components/Quiz';\nimport { Background } from './styled-components/MainStyles';\n\nfunction App() {\n  return (\n    <Background>\n      <Quiz />\n    </Background>\n  );\n}\n\nexport default App;\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    font-family: 'Montserrat', sans-serif;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { QuizProvider } from './contexts/QuizContext';\nimport GlobalStyle from './styled-components/GlobalStyles';\n\nReactDOM.render(\n  <React.StrictMode>\n    <QuizProvider>\n      <GlobalStyle />\n      <App />\n    </QuizProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}